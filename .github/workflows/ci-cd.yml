---

name: CI

on:
  merge_group:
  push:
    branches:
    - master
    - '[0-9].[0-9]+'  # matches to backport branches, e.g. 3.9
    tags:
    - v*
  pull_request:
    branches:
    - master
    - '[0-9].[0-9]+'  # matches to backport branches, e.g. 3.9
  schedule:
  - cron: '0 6 * * *'  # Daily 6AM UTC build


concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true


env:
  PYTHON_LATEST: "3.12"


jobs:

  pre-setup:
    name: ⚙️ Pre-set global build settings
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: python
    outputs:
      # NOTE: These aren't env vars because the `${{ env }}` context is
      # NOTE: inaccessible when passing inputs to reusable workflows.
      dists-artifact-name: python-package-distributions
      sdist-name: yarl-*.tar.gz
      wheel-name: yarl-*.whl
    steps:
    - run: >-
        print('No-op')


  build-sdist:
    name: 📦 Build the source distribution
    needs:
    - pre-setup
    runs-on: ubuntu-latest
    steps:
    - name: Checkout project
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_LATEST }}
        cache: pip
    - name: Install core libraries for build and install
      run: python -Im pip install build
    - name: Build sdist
      env:
        PIP_CONSTRAINT: requirements/cython.txt
      run: python -Im build --sdist
    - name: Upload built artifacts for testing
      uses: actions/upload-artifact@v3
      with:
        name: ${{ needs.pre-setup.outputs.dists-artifact-name  }}
        # NOTE: Exact expected file names are specified here
        # NOTE: as a safety measure — if anything weird ends
        # NOTE: up being in this dir or not all dists will be
        # NOTE: produced, this will fail the workflow.
        path: dist/${{ needs.pre-setup.outputs.sdist-name }}
        retention-days: 15

  lint:
    uses: ./.github/workflows/reusable-linters.yml

  build-wheels-for-tested-arches:
    needs:
    - build-sdist
    - pre-setup  # transitive, for accessing settings
    strategy:
      matrix:
        os:
        - ubuntu
        - windows
        - macos
    uses: ./.github/workflows/reusable-build-wheel.yml
    with:
      os: ${{ matrix.os }}
      source-tarball-name: ${{ needs.pre-setup.outputs.sdist-name }}
      dists-artifact-name: ${{ needs.pre-setup.outputs.dists-artifact-name }}

  test:
    name: Test
    needs:
    - build-wheels-for-tested-arches
    - pre-setup  # transitive, for accessing settings
    strategy:
      matrix:
        pyver: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
        no-extensions: ['', 'Y']
        os: [ubuntu, macos, windows]
        experimental: [false]
        exclude:
        - os: macos
          no-extensions: 'Y'
        - os: windows
          no-extensions: 'Y'
        include:
        - pyver: pypy-3.9
          no-extensions: 'Y'
          experimental: false
          os: ubuntu
        - pyver: pypy-3.8
          no-extensions: 'Y'
          experimental: false
          os: ubuntu
      fail-fast: false
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 15
    continue-on-error: ${{ matrix.experimental }}
    steps:
    - name: Retrieve the project source from an sdist inside the GHA artifact
      uses: re-actors/checkout-python-sdist@release/v1
      with:
        source-tarball-name: ${{ needs.pre-setup.outputs.sdist-name }}
        workflow-artifact-name: >-
          ${{ needs.pre-setup.outputs.dists-artifact-name }}

    - name: Setup Python ${{ matrix.pyver }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.pyver }}
        cache: 'pip'
        cache-dependency-path: 'requirements/*.txt'
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4
      with:
        path: requirements/ci.txt
    - name: Self-install
      env:
        PIP_CONSTRAINT: requirements/cython.txt
      run: >-
        python -Im pip install -e .
        --config-settings=--pure-python=${{
          matrix.no-extensions != ''
          && 'true'
          || 'false'
        }}
    - name: Run unittests
      env:
        COLOR: 'yes'
        YARL_NO_EXTENSIONS: ${{ matrix.no-extensions }}
      run: |
        python -Im pytest tests -vv
        python -Im coverage xml
    - name: Upload coverage
      uses: codecov/codecov-action@v3.1.4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unit
        fail_ci_if_error: false

  test-summary:
    name: Tests status
    if: always()
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}

  pre-deploy:
    name: Pre-Deploy
    runs-on: ubuntu-latest
    needs: test-summary
    # Run only on pushing a tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
    - name: Dummy
      run: |
        echo "Predeploy step"

  build-wheels-for-odd-archs:
    needs:
    - build-sdist
    - pre-deploy
    - pre-setup  # transitive, for accessing settings
    strategy:
      matrix:
        qemu:
        - aarch64
        - ppc64le
        - s390x
    uses: ./.github/workflows/reusable-build-wheel.yml
    with:
      qemu: ${{ matrix.qemu }}
      source-tarball-name: ${{ needs.pre-setup.outputs.sdist-name }}
      dists-artifact-name: ${{ needs.pre-setup.outputs.dists-artifact-name }}

  deploy:
    name: Deploy
    needs:
    - build-sdist
    - build-wheels-for-odd-archs
    - build-wheels-for-tested-arches
    - pre-setup  # transitive, for accessing settings
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for trusted publishing & sigstore

    environment:
      name: pypi
      url: https://pypi.org/p/yarl

    steps:
    - name: Retrieve the project source from an sdist inside the GHA artifact
      uses: re-actors/checkout-python-sdist@release/v1
      with:
        source-tarball-name: ${{ needs.pre-setup.outputs.sdist-name }}
        workflow-artifact-name: >-
          ${{ needs.pre-setup.outputs.dists-artifact-name }}

    - name: Login
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
    - name: Download distributions
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.pre-setup.outputs.dists-artifact-name }}
        path: dist
    - name: Make Release
      uses: aio-libs/create-release@v1.6.6
      with:
        changes_file: CHANGES.rst
        name: yarl
        version_file: yarl/__init__.py
        github_token: ${{ secrets.GITHUB_TOKEN }}
        fix_issue_regex: >-
          `#(\d+) <https://github.com/aio-libs/yarl/issues/\1>`
        fix_issue_repl: >-
          (#\1)

    - name: >-
        Publish 🐍📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v2.1.0
      with:
        inputs: >-
          ./dist/${{ needs.pre-setup.outputs.sdist-name }}
          ./dist/*.whl

    - name: Upload artifact signatures to GitHub Release
      # Confusingly, this action also supports updating releases, not
      # just creating them. This is what we want here, since we've manually
      # created the release above.
      uses: softprops/action-gh-release@v1
      with:
        # dist/ contains the built packages, which smoketest-artifacts/
        # contains the signatures and certificates.
        files: dist/**

...
